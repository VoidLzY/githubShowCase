[1,["ecpdLyjvZBwrvm+cedCcQy","fasRTFgHxBZIAIIuzgGJ/E","a2MjXRFdtLlYQ5ouAFv/+R","07OlwrZOlANaOnx80wx4R/","2aEQiWb5hBeLKvHUbqCLqD","f4UM6PSupCyZF/pHYhnSJF"],["node","_spriteFrame","root","clickText","textNode","touchBlocker","hollowOut","data","_effect","_textureSetter"],[["cc.Node",["_name","_active","_components","_prefab","_contentSize","_parent","_children","_trs","_color"],1,9,4,5,1,2,7,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Sprite",["_sizeMode","_type","node","_materials","_spriteFrame"],1,1,3,6],["cc.Label",["_string","_N$horizontalAlign","_N$verticalAlign","_N$overflow","_fontSize","node","_materials"],-2,1,3],"cc.SpriteFrame",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_active","_parent","_components","_prefab","_color","_contentSize"],1,1,12,4,5,5],["cc.Node",["_name","_active","_parent","_components","_prefab","_contentSize"],1,1,2,4,5],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["15726SfzZpI/Z3Wva2n6Ds9",["node","hollowOut","touchBlocker","textNode","clickText"],3,1,1,1,1,1],["cc.Sprite",["_sizeMode","_materials","node","_spriteFrame"],1,1,6],["af64dQP7QpG9o1b/fwPiTrQ",["node"],3,1],["826c1DeJKZJOaBPEKmCSIFb",["node"],3,1]],[[1,0,1,2,2],[9,0,1,2,3,4],[5,0,1,2,4],[6,0,2],[0,0,6,2,3,4,7,2],[0,0,1,5,6,2,3,4,3],[0,0,5,2,3,8,4,2],[0,0,5,2,3,4,2],[7,0,1,2,3,4,5,6,3],[8,0,1,2,3,4,5,3],[10,0,1,2,3,4,1],[1,1,2,1],[2,0,2,3,4,2],[2,1,0,2,3,4,3],[11,0,1,2,3,3],[3,0,4,1,2,3,5,6,6],[3,0,1,2,3,5,6,5],[12,0,1],[13,0,1]],[[[[2,"hollowout",[{"hash":4212632608,"record":null,"name":"hollowout|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nin vec4 a_color;\nout vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nin vec2 v_uv0;\nin vec4 v_color;\nuniform sampler2D texture;\nuniform Properties {\n  vec2 center;\n  vec2 size;\n  float width;\n  float height;\n  float round;\n  float feather;\n};\nvoid main () {\n  vec4 color = v_color;\n  color *= texture(texture, v_uv0);\n  float x = v_uv0.x;\n  float y = v_uv0.y;\n  float ratio = size.x / size.y;\n  float minX = center.x - (width / 2.0);\n  float maxX = center.x + (width / 2.0);\n  float minY = center.y - (height * ratio / 2.0);\n  float maxY = center.y + (height * ratio / 2.0);\n  if (x >= minX && x <= maxX && y >= minY && y <= maxY) {\n    if (round == 0.0) discard;\n    float roundY = round * ratio;\n    vec2 vertex;\n    if (x <= minX + round) {\n      if (y <= minY + roundY) {\n        vertex = vec2(minX + round, (minY + roundY) / ratio);\n      } else if (y >= maxY - roundY) {\n        vertex = vec2(minX + round, (maxY - roundY) / ratio);\n      } else {\n        vertex = vec2(minX + round, y / ratio);\n      }\n    } else if (x >= maxX - round) {\n      if (y <= minY + roundY){\n        vertex = vec2(maxX - round, (minY + roundY) / ratio);\n      } else if (y >= maxY - roundY) {\n        vertex = vec2(maxX - round, (maxY - roundY) / ratio);\n      } else {\n        vertex = vec2(maxX - round, y / ratio);\n      }\n    } else if (y <= minY + roundY) {\n      vertex = vec2(x, (minY + roundY) / ratio);\n    } else if (y >= maxY - roundY) {\n      vertex = vec2(x, (maxY - roundY) / ratio);\n    } else {\n      discard;\n    }\n    float dis = distance(vec2(x, y / ratio), vertex);\n    color.a = smoothstep(round - feather, round, dis) * color.a;\n  }\n  color.a *= v_color.a;\n  gl_FragColor = color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nattribute vec4 a_color;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform vec2 center;\nuniform vec2 size;\nuniform float width;\nuniform float height;\nuniform float round;\nuniform float feather;\nvoid main () {\n  vec4 color = v_color;\n  color *= texture2D(texture, v_uv0);\n  float x = v_uv0.x;\n  float y = v_uv0.y;\n  float ratio = size.x / size.y;\n  float minX = center.x - (width / 2.0);\n  float maxX = center.x + (width / 2.0);\n  float minY = center.y - (height * ratio / 2.0);\n  float maxY = center.y + (height * ratio / 2.0);\n  if (x >= minX && x <= maxX && y >= minY && y <= maxY) {\n    if (round == 0.0) discard;\n    float roundY = round * ratio;\n    vec2 vertex;\n    if (x <= minX + round) {\n      if (y <= minY + roundY) {\n        vertex = vec2(minX + round, (minY + roundY) / ratio);\n      } else if (y >= maxY - roundY) {\n        vertex = vec2(minX + round, (maxY - roundY) / ratio);\n      } else {\n        vertex = vec2(minX + round, y / ratio);\n      }\n    } else if (x >= maxX - round) {\n      if (y <= minY + roundY){\n        vertex = vec2(maxX - round, (minY + roundY) / ratio);\n      } else if (y >= maxY - roundY) {\n        vertex = vec2(maxX - round, (maxY - roundY) / ratio);\n      } else {\n        vertex = vec2(maxX - round, y / ratio);\n      }\n    } else if (y <= minY + roundY) {\n      vertex = vec2(x, (minY + roundY) / ratio);\n    } else if (y >= maxY - roundY) {\n      vertex = vec2(x, (maxY - roundY) / ratio);\n    } else {\n      discard;\n    }\n    float dis = distance(vec2(x, y / ratio), vertex);\n    color.a = smoothstep(round - feather, round, dis) * color.a;\n  }\n  color.a *= v_color.a;\n  gl_FragColor = color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Properties","binding":0,"members":[{"name":"center","type":14,"count":1},{"name":"size","type":14,"count":1},{"name":"width","type":13,"count":1},{"name":"height","type":13,"count":1},{"name":"round","type":13,"count":1},{"name":"feather","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"hollowout|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"size":{"type":14,"value":[500,500],"editor":{"tooltip":"节点尺寸"}},"center":{"type":14,"value":[0.5,0.5],"editor":{"tooltip":"中心点 (左上角为原点)"}},"width":{"type":13,"value":[0.5],"editor":{"tooltip":"宽 (目标宽度 / 节点宽度)"}},"height":{"type":13,"value":[0.5],"editor":{"tooltip":"高 (目标高度 / 节点宽度)"}},"round":{"type":13,"value":[0.1],"editor":{"tooltip":"圆角半径 (目标半径 / 节点宽度)"}},"feather":{"type":13,"value":[0.05],"editor":{"tooltip":"边缘虚化宽度"}}}}]}]]],0,0,[],[],[]],[[[3,"DlgGuide"],[4,"DlgGuide",[-8,-9,-10],[[1,45,1920,1080,-2],[10,-7,-6,-5,-4,-3]],[11,-1,0],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[5,"textNode",false,1,[-13,-14],[[12,0,-11,[3],4],[1,45,1920,1080,-12]],[0,"fc2mvNtypLCIjoaDiisa2X",1,0],[5,1920,1080]],[8,"mask",false,1,[[[14,0,[null],-15,5],[1,45,1920,1080,-16],-17,-18],4,4,1,1],[0,"43Jat8AEVMJIcgaJjTvYmi",1,0],[4,4278190080],[5,1920,1080]],[6,"textBg",2,[[13,1,0,-19,[0],1]],[0,"59YBPdJhJC/pwsTOC01MYd",1,0],[4,4287006382],[5,600,300]],[7,"textLab",2,[[15,"这里填写的是tip",50,1,1,2,-20,[2]]],[0,"31hRwx9StBhJ4XieLlGHa6",1,0],[5,550,250]],[17,3],[18,3],[9,"clickText",false,1,[-21],[0,"c1HDWQ2tlEop00e9X6JJVh",1,0],[5,800,100]],[16,"Label",1,1,2,8,[6]]],0,[0,2,1,0,0,1,0,3,9,0,4,2,0,5,6,0,6,7,0,0,1,0,-1,2,0,-2,3,0,-3,8,0,0,2,0,0,2,0,-1,4,0,-2,5,0,0,3,0,0,3,0,-3,6,0,-4,7,0,0,4,0,0,5,0,-1,9,0,7,1,21],[0,0,0,0,0,0,0,7],[-1,1,-1,-1,1,1,-1,8],[0,1,0,0,2,3,0,4]],[[{"name":"quad_round","rect":[0,0,90,89],"offset":[0,0],"originalSize":[90,89],"capInsets":[15,16,17,16]}],[4],0,[0],[9],[5]]]]