[1,["07OlwrZOlANaOnx80wx4R/","e9PeFdrOhFQqKkwpYAYHKL","ecpdLyjvZBwrvm+cedCcQy","a2MjXRFdtLlYQ5ouAFv/+R","ebiQi64FpE2J2TdsGHp0ae","a1n6zOipxP2K6DIyC0y6WG","49F070TkJJqaqB4ikLhXv2","dcVKlkVzlMzamPdCE0gApC","b45z8MwyZFY5Ap3qvZ9U63","80344oJ7pMQ5Ez/Ydao/FN"],["node","_spriteFrame","_effectAsset","texture","root","data"],[["cc.Node",["_name","_components","_prefab","_contentSize","_trs","_parent","_children","_color"],2,9,4,5,7,1,2,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Prefab",["_name"],2],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["4cad9tKj3RJO4Lbz3GYFmHA",["node"],3,1],["cc.Sprite",["_sizeMode","node","_materials","_spriteFrame"],2,1,3,6],["cc.BlockInputEvents",["node"],3,1],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[1,0,1,2,2],[5,0,1,2,3,2],[0,0,5,1,2,3,4,2],[9,0,1,2,4],[3,0,1,2,3,4],[8,0,1,2],[2,0,2],[0,0,6,1,2,3,4,2],[0,0,5,1,2,7,3,2],[4,0,1],[1,1,2,1],[6,0,1],[7,0,1,3]],[[[[6,"DlgLyShader"],[7,"DlgLyShader",[-4,-5,-6,-7],[[4,45,1920,1080,-2],[9,-3]],[10,-1,0],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[8,"bg",1,[[1,0,-8,[0],1],[4,45,1920,1080,-9],[11,-10]],[0,"90R1ixud5I96LH6VN2AZq6",1,0],[4,4290888129],[5,1920,1080]],[2,"darts",1,[[1,0,-11,[2],3]],[0,"1d3OjyHQlAQLdMDqupoD6d",1,0],[5,400,400],[92.624,0,0,0,0,0,1,1,1,1]],[2,"moveGirds",1,[[1,0,-12,[4],5]],[0,"98vrDi8w1G7ZAAzhKBci1T",1,0],[5,400,400],[-468.125,0,0,0,0,0,1,1,1,1]],[2,"blueLine",1,[[1,0,-13,[6],7]],[0,"d9DhtoXtFAnq0L/S0XrzqK",1,0],[5,400,400],[609.872,0,0,0,0,0,1,1,1,1]]],0,[0,4,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,2,0,0,3,0,0,4,0,0,5,0,5,1,13],[0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1],[2,3,4,0,5,0,6,0]],[[[12,"blueLine",{"0":{"defines":{"BLUE_LINE":true,"USE_ALPHA_TEST":true},"props":{"offset":0.5}}}]],0,0,[0],[2],[7]],[[[3,"darts",[{"hash":1543214020,"record":null,"name":"darts|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Circle(vec2 uv, vec2 o, float r, float blur) {\n  return smoothstep(r, r-blur, distance(uv, o));\n}\nvec2 rotate2D(vec2 _st, float _angle){\n  _st =  mat2(cos(_angle),-sin(_angle),\n              sin(_angle),cos(_angle)) * _st;\n  return _st;\n}\nconst float PI = 3.141592653;\nvoid main () {\n  vec4 o = vec4(0.);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0 - 0.5;\n    const float count = 3.0;\n    float time = cc_time.x;\n    float radius=abs(sin(PI*time*.5))/5.;\n    uv=rotate2D(uv,2.*PI*time);\n    for(float i=0.;i<count;i++){\n        float rotation= 2.0*PI*i/count + time*2.0*PI/4.0;\n        o.a+=Circle(uv,vec2(radius*cos(rotation), radius*sin(rotation)),radius,0.02);\n        o.a-=Circle(uv,vec2(radius*sin(rotation), radius*cos(rotation)),radius*0.6,0.04);\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Circle(vec2 uv, vec2 o, float r, float blur) {\n  return smoothstep(r, r-blur, distance(uv, o));\n}\nvec2 rotate2D(vec2 _st, float _angle){\n  _st =  mat2(cos(_angle),-sin(_angle),\n              sin(_angle),cos(_angle)) * _st;\n  return _st;\n}\nconst float PI = 3.141592653;\nvoid main () {\n  vec4 o = vec4(0.);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0 - 0.5;\n    const float count = 3.0;\n    float time = cc_time.x;\n    float radius=abs(sin(PI*time*.5))/5.;\n    uv=rotate2D(uv,2.*PI*time);\n    for(float i=0.;i<count;i++){\n        float rotation= 2.0*PI*i/count + time*2.0*PI/4.0;\n        o.a+=Circle(uv,vec2(radius*cos(rotation), radius*sin(rotation)),radius,0.02);\n        o.a-=Circle(uv,vec2(radius*sin(rotation), radius*cos(rotation)),radius*0.6,0.04);\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"darts|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]}]]],0,0,[],[],[]],[[[5,"moveGrids",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}},"props",11,[{},"texture",6,0]]]]],0,0,[0,0],[3,2],[1,8]],[[[3,"moveGrids",[{"hash":2347383219,"record":null,"name":"moveGrids|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 rotate2D(vec2 _st,float _angle){\n  _st-=.5;\n  _st=mat2(cos(_angle),-sin(_angle),\n  sin(_angle),cos(_angle))*_st;\n  _st+=.5;\n  return _st;\n}\nvec2 brickTile(vec2 _st,float _zoom,float u_time){\n  _st*=_zoom;\n  float timeSin=sin(u_time*3.1415926535/2.);\n  if(timeSin>0.){\n      _st.x+=step(1.,mod(_st.y,2.))*.5*u_time;\n      _st.x-=step(1.,mod(_st.y+1.,2.))*.5*u_time;\n  }else{\n      _st.y+=step(1.,mod(_st.x,2.))*.5*u_time;\n      _st.y-=step(1.,mod(_st.x+1.,2.))*.5*u_time;\n  }\n  return fract(_st);\n}\nfloat box(vec2 _st,vec2 _size){\n  _size=vec2(.5)-_size*.5;\n  vec2 uv=smoothstep(_size,_size+vec2(1e-4),_st);\n  uv*=smoothstep(_size,_size+vec2(1e-4),vec2(1.)-_st);\n  return uv.x*uv.y;\n}\nconst float PI =3.14159265358979323846;\nvoid main () {\n  vec4 o = vec4(1.);\n  #if USE_TEXTURE\n    vec2 uv =v_uv0;\n    float time = cc_time.x;\n    vec3 color=vec3(1.);\n    uv=brickTile(uv,5.,time);\n    uv=rotate2D(uv,PI*.25*time);\n    color=vec3(box(uv,vec2(.7)));\n    color*=vec3(sin(time),sin(uv.y),sin(uv.x));\n    o=vec4(color,1.);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 rotate2D(vec2 _st,float _angle){\n  _st-=.5;\n  _st=mat2(cos(_angle),-sin(_angle),\n  sin(_angle),cos(_angle))*_st;\n  _st+=.5;\n  return _st;\n}\nvec2 brickTile(vec2 _st,float _zoom,float u_time){\n  _st*=_zoom;\n  float timeSin=sin(u_time*3.1415926535/2.);\n  if(timeSin>0.){\n      _st.x+=step(1.,mod(_st.y,2.))*.5*u_time;\n      _st.x-=step(1.,mod(_st.y+1.,2.))*.5*u_time;\n  }else{\n      _st.y+=step(1.,mod(_st.x,2.))*.5*u_time;\n      _st.y-=step(1.,mod(_st.x+1.,2.))*.5*u_time;\n  }\n  return fract(_st);\n}\nfloat box(vec2 _st,vec2 _size){\n  _size=vec2(.5)-_size*.5;\n  vec2 uv=smoothstep(_size,_size+vec2(1e-4),_st);\n  uv*=smoothstep(_size,_size+vec2(1e-4),vec2(1.)-_st);\n  return uv.x*uv.y;\n}\nconst float PI =3.14159265358979323846;\nvoid main () {\n  vec4 o = vec4(1.);\n  #if USE_TEXTURE\n    vec2 uv =v_uv0;\n    float time = cc_time.x;\n    vec3 color=vec3(1.);\n    uv=brickTile(uv,5.,time);\n    uv=rotate2D(uv,PI*.25*time);\n    color=vec3(box(uv,vec2(.7)));\n    color*=vec3(sin(time),sin(uv.y),sin(uv.x));\n    o=vec4(color,1.);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"moveGrids|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[3,"blueLine",[{"hash":413863328,"record":null,"name":"blueLine|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform Properties {\n    float amplitude;\n    float angularVelocity;\n    float frequency;\n    float offset;\n    bool toLeft;\n  };\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n  void main () {\n    vec4 o = vec4(0, 0.7, 0.9, 0);\n    #if BLUE_LINE\n      vec2 uv=v_uv0;\n      float time = cc_time.x;\n      float y =amplitude * sin((angularVelocity * uv.x) + ((frequency * time) * (toLeft ? 1. : -1.))) + offset;\n      o.a=plot(uv,y);\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n  }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform float amplitude;\nuniform float angularVelocity;\nuniform float frequency;\nuniform float offset;\nuniform bool toLeft;\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n  void main () {\n    vec4 o = vec4(0, 0.7, 0.9, 0);\n    #if BLUE_LINE\n      vec2 uv=v_uv0;\n      float time = cc_time.x;\n      float y =amplitude * sin((angularVelocity * uv.x) + ((frequency * time) * (toLeft ? 1. : -1.))) + offset;\n      o.a=plot(uv,y);\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n  }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"BLUE_LINE","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"amplitude","type":13,"count":1},{"name":"angularVelocity","type":13,"count":1},{"name":"frequency","type":13,"count":1},{"name":"offset","type":13,"count":1},{"name":"toLeft","type":1,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"blueLine|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"amplitude":{"type":13,"value":[0.05],"range":[0,0.5],"editor":{"tooltip":"振幅"}},"angularVelocity":{"type":13,"value":[10],"editor":{"tooltip":"角速度"}},"frequency":{"type":13,"value":[10],"editor":{"tooltip":"频率"}},"offset":{"type":13,"value":[0.5],"range":[0,1],"editor":{"tooltip":"偏距"}},"toLeft":{"type":1,"value":[true],"editor":{"type":"boolean","tooltip":"向左（方向）"}}}}]}]]],0,0,[],[],[]],[[[5,"darts",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false}},"props",11,[{},"texture",6,0]]]]],0,0,[0,0],[3,2],[1,9]]]]